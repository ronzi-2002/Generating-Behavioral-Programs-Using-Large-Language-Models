History:
Role: user
Content:  There are 5 animal enclosures in the zoo - 2 for lions (one big lions and one for small), 1 for tigers, 1 for dolphins and an aquarium.


Role: assistant
Content: function animalEnclosure(id, subtype) {
    return ctx.Entity(id, "animalEnclosure", { subtype: subtype });
}
ctx.populateContext([animalEnclosure("bigLions1", "lions"),animalEnclosure("smallLions1", "lions"),animalEnclosure("tigers1", "tigers"),animalEnclosure("dolphins1", "dolphins"),animalEnclosure("aquarium1", "aquarium"),
]);


Role: user
Content:     Needed queries:
    1. animalEnclosure
    2. water_related_enclosure
    3. non_water_related_enclosure
    4. lion_enclosure


Role: assistant
Content: ctx.registerQuery("animalEnclosure", (entity) => entity.type == String("animalEnclosure"));
ctx.registerQuery("water_related_enclosure", (entity) => entity.type == String("animalEnclosure") && (entity.subtype == String("aquarium") || entity.subtype == String("dolphins")));
ctx.registerQuery("non_water_related_enclosure", (entity) => entity.type == String("animalEnclosure") && (entity.subtype == String("lions") || entity.subtype == String("tigers")));
ctx.registerQuery("lion_enclosure", (entity) => entity.type == String("animalEnclosure") && entity.subtype == String("lions"));


Requirements and Code:
Requirement:  For each water related enclosure, when the "clean" button is pressed, send a diver to clean the enclosure.

Code: function cleanButtonIsPressedEvent(animalEnclosureId) {
    return Event("cleanButtonIsPressedEvent", animalEnclosureId);
}
function sendDiverToCleanEvent(animalEnclosureId) {
    return Event("sendDiverToCleanEvent", animalEnclosureId);
}


ctx.bthread( "for each water related enclosure, when the 'clean' button is pressed, send a diver to clean the enclosure", "water_related_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonIsPressedEvent(animalEnclosure.id)] });
        sync({ request: [sendDiverToCleanEvent(animalEnclosure.id)] });
    }
});



Requirement:  For each non-water related enclosure, when the "clean" button is pressed, send a janitor to clean the enclosure.

Code: function sendJanitorToCleanEvent(animalEnclosureId) {
    return Event("sendJanitorToCleanEvent", animalEnclosureId);
}


ctx.bthread( "for each non-water related enclosure, when the 'clean' button is pressed, send a janitor to clean the enclosure", "non_water_related_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonIsPressedEvent(animalEnclosure.id)] });
        sync({ request: [sendJanitorToCleanEvent(animalEnclosure.id)] });
    }
});



Requirement:  For each lion enclosure, when the "feed" button is pressed, send a zookeeper to feed the lions.

Code: function feedButtonIsPressedEvent(animalEnclosureId) {
    return Event("feedButtonIsPressedEvent", animalEnclosureId);
}
function sendZookeeperToFeedEvent(animalEnclosureId) {
    return Event("sendZookeeperToFeedEvent", animalEnclosureId);
}


ctx.bthread( "for each lion enclosure, when the 'feed' button is pressed, send a zookeeper to feed the lions", "lion_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [feedButtonIsPressedEvent(animalEnclosure.id)] });
        sync({ request: [sendZookeeperToFeedEvent(animalEnclosure.id)] });
    }
});




Requirement:  After lions are fed, they cannot be fed again until they roar.

Code: function lionRoarEvent(animalEnclosureId) {
    return Event("lionRoarEvent", animalEnclosureId);
}

ctx.bthread( "after lions are fed, they cannot be fed again until they roar", "lion_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [sendZookeeperToFeedEvent(animalEnclosure.id)] });
        sync({ waitFor: [lionRoarEvent(animalEnclosure.id)], block: [sendZookeeperToFeedEvent(animalEnclosure.id)] });
    }
});



Requirement:  After The zoo is closed, lights in all animal enclosures are turned off

Code: function zooClosedEvent() {
    return Event("zooClosedEvent");
}
function turnOffLightsEvent(animalEnclosureId) {
    return Event("turnOffLightsEvent", animalEnclosureId);
}

ctx.bthread( "after The zoo is closed, lights in all animal enclosures are turned off", "animalEnclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [zooClosedEvent()] });
        sync({ request: [turnOffLightsEvent(animalEnclosure.id)] });
    }
});




Requirement:   Animal enclosures lights turn on right after sunset starts

Code: function turnOnLightsEvent(animalEnclosureId) {
    return Event("turnOnLightsEvent", animalEnclosureId);
}
function sunsetStartEvent() {
    return Event("sunsetStartEvent");
}

ctx.bthread( "Zoo lights turn on right after sunset starts", "animalEnclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [sunsetStartEvent()] });
        sync({ request: [turnOnLightsEvent(animalEnclosure.id)] });
    }
});



Requirement:  Animal enclosures lights cant be turned off until they were turned on and vice versa. All zoo lights are off at first(default)

Code: ctx.bthread( "Animal enclosures lights cant be turned off until they were turned on and vice versa. All zoo lights are off at first(default)", "animalEnclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [turnOnLightsEvent(animalEnclosure.id)], block: [turnOffLightsEvent(animalEnclosure.id)] });
        sync({ waitFor: [turnOffLightsEvent(animalEnclosure.id)], block: [turnOnLightsEvent(animalEnclosure.id)] });
    }
});

