Requirement:  For each water related enclosure, when the "clean" button is pressed, send a diver to clean the enclosure.

Generated Code: function cleanButtonPressedEvent(enclosureId) {
    return Event("cleanButtonPressedEvent", { enclosureId: enclosureId });
}

function sendDiverEvent(enclosureId) {
    return Event("sendDiverEvent", { enclosureId: enclosureId });
}

ctx.bthread('Send diver to clean water related enclosures', 'water_related_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonPressedEvent(enclosure.id)] });
        sync({ request: [sendDiverEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Send diver to clean water related enclosures', 'water_related_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonPressedEvent(enclosure.id)] });
        sync({ request: [sendDiverEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 0.5131646692667885, 'ngram_match_score': 0.43459820850707825, 'weighted_ngram_match_score': 0.5097735741968212, 'syntax_match_score': 0.6938775510204082, 'dataflow_match_score': 0.35294117647058826}

Requirement:  For each non-water related enclosure, when the "clean" button is pressed, send a janitor to clean the enclosure.

Generated Code: function sendJanitorEvent(enclosureId) {
    return Event("sendJanitorEvent", { enclosureId: enclosureId });
}

ctx.bthread('Send janitor to clean non-water related enclosures', 'non_water_related_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonPressedEvent(enclosure.id)] });
        sync({ request: [sendJanitorEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Send janitor to clean non-water related enclosures', 'non_water_related_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonPressedEvent(enclosure.id)] });
        sync({ request: [sendJanitorEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 0.6716178920064978, 'ngram_match_score': 0.6592406302004437, 'weighted_ngram_match_score': 0.6751201080463519, 'syntax_match_score': 0.8, 'dataflow_match_score': 0.5454545454545454}

Requirement:  For each lion enclosure, when the "feed" button is pressed, send a zookeeper to feed the lions.

Generated Code: function feedButtonPressedEvent(enclosureId) {
    return Event("feedButtonPressedEvent", { enclosureId: enclosureId });
}

function sendZookeeperEvent(enclosureId) {
    return Event("sendZookeeperEvent", { enclosureId: enclosureId });
}

ctx.bthread('Send zookeeper to feed lions in lion enclosures', 'lion_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [feedButtonPressedEvent(enclosure.id)] });
        sync({ request: [sendZookeeperEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Send zookeeper to feed lions in lion enclosures', 'lion_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [feedButtonPressedEvent(enclosure.id)] });
        sync({ request: [sendZookeeperEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 0.5164158639041445, 'ngram_match_score': 0.44932896411722156, 'weighted_ngram_match_score': 0.5275547649602377, 'syntax_match_score': 0.6938775510204082, 'dataflow_match_score': 0.35294117647058826}

Requirement:  After lions are fed, they cannot be fed again until they roar.

Generated Code: function lionRoarEvent(enclosureId) {
    return Event("lionRoarEvent", { enclosureId: enclosureId });
}

ctx.bthread('Block feeding lions until they roar', 'lion_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [sendZookeeperEvent(enclosure.id)] });
        sync({ block: [feedButtonPressedEvent(enclosure.id)], waitFor: [lionRoarEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Block feeding lions until they roar', 'lion_enclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [sendZookeeperEvent(enclosure.id)] });
        sync({ block: [feedButtonPressedEvent(enclosure.id)], waitFor: [lionRoarEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 0.6797030787526017, 'ngram_match_score': 0.6703200460356393, 'weighted_ngram_match_score': 0.6839756987553353, 'syntax_match_score': 0.8222222222222222, 'dataflow_match_score': 0.5384615384615384}

Requirement:  After The zoo is closed, lights in all animal enclosures are turned off

Generated Code: function zooClosedEvent() {
    return Event("zooClosedEvent");
}

function turnOffLightsEvent(enclosureId) {
    return Event("turnOffLightsEvent", { enclosureId: enclosureId });
}

ctx.bthread('Turn off lights in all enclosures after zoo closes', 'animalEnclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [zooClosedEvent()] });
        sync({ request: [turnOffLightsEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Turn off lights in all enclosures after zoo closes', 'animalEnclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [zooClosedEvent()] });
        sync({ request: [turnOffLightsEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 0.5446514250477088, 'ngram_match_score': 0.5404329964865341, 'weighted_ngram_match_score': 0.5850110198768417, 'syntax_match_score': 0.6956521739130435, 'dataflow_match_score': 0.38461538461538464}

Requirement:   Animal enclosures lights turn on right after sunset starts

Generated Code: function sunsetStartsEvent() {
    return Event("sunsetStartsEvent");
}

function turnOnLightsEvent(enclosureId) {
    return Event("turnOnLightsEvent", { enclosureId: enclosureId });
}

ctx.bthread('Turn on lights in all enclosures at sunset', 'animalEnclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [sunsetStartsEvent()] });
        sync({ request: [turnOnLightsEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Turn on lights in all enclosures at sunset', 'animalEnclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [sunsetStartsEvent()] });
        sync({ request: [turnOnLightsEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 0.5424069710080784, 'ngram_match_score': 0.5272924240430487, 'weighted_ngram_match_score': 0.5757070519240234, 'syntax_match_score': 0.6956521739130435, 'dataflow_match_score': 0.38461538461538464}

Requirement:  Animal enclosures lights cant be turned off until they were turned on and vice versa. All zoo lights are off at first(default)

Generated Code: ctx.bthread('Enforce order of light control in animal enclosures', 'animalEnclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [turnOnLightsEvent(enclosure.id)], block: [turnOffLightsEvent(enclosure.id)] });
        sync({ waitFor: [turnOffLightsEvent(enclosure.id)], block: [turnOnLightsEvent(enclosure.id)] });
    }
});
Generated Code Isolated: ctx.bthread('Enforce order of light control in animal enclosures', 'animalEnclosure', function (enclosure) {
    while (true) {
        sync({ waitFor: [turnOnLightsEvent(enclosure.id)], block: [turnOffLightsEvent(enclosure.id)] });
        sync({ waitFor: [turnOffLightsEvent(enclosure.id)], block: [turnOnLightsEvent(enclosure.id)] });
    }
});
Blue Score: {'codebleu': 1.0, 'ngram_match_score': 1.0, 'weighted_ngram_match_score': 1.0, 'syntax_match_score': 1.0, 'dataflow_match_score': 1.0}

