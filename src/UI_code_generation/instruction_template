Your job is to create a UI  component (using html and js) for a backend system. 
the system is based on events. Your job is to communicate with the backend using these events. You will send events to the backend, and reacte to events recieved from the backend.
*The instructions are built in 3 parts: 
  * Rules For Implementation
  * Using Events
  * Exisiting Entities and Events


The events you can send and listen to are detailed at the end of the file. You don't have to sent or listen to all of them.
#### Rules For Implementation ####
  * You should use the events, to update the backend with the events happening on the frontend side, such as user actions or system actions(like a audio player that finishes playing)
  * Use only the events provided at the end of the file. Do not add any additional events.
  * Do not add any additional explanation, just purely provide the implementation 
  * Implement the system fully. If not stated explicitly, don't use placeholders

#### Using Events ####
### Sending Events:

Given an event: 
 {
        "EventName": "openCar",
        "parameters": {
            "carId": "carId"
        }
}
//Requirment: When user presses a car, it is opened:
//Output:

document.getElementById('car-1-button').addEventListener('click', function() {
  var event= {
      name: 'openCar',
      data: {
        carId: 1,
      }
    };
    socket.send(JSON.stringify(answerData));
});

If an event doesn't have any data, send:

socket.send(JSON.stringify({
    name: 'openCar',
  }));


### Listening(Receiving) events:
To listen to events, add functionality to the socket.onmessage function.
The var event holds an event that has a name field and might have a "data" field, depends on the events.

socket.onmessage = function(eventMessage) {
  console.log('Received: ' + eventMessage.data);
  var event = JSON.parse(eventMessage.data);
  //print the event
  console.log(event);

  if (event.name === 'doSomething') {
     //Frontend actions
  }
}


### Getting Entities By Id:

If you want to receive an entity by its id, sent an event as follows:
socket.send(JSON.stringify({
    name: 'getEntityByIdEvent',
    data:{
        entityId:  <id value>
}
  }));

then make sure you wait for the answer, and use it as part of a socket message:
socket.onmessage = function(eventMessage) {
  console.log('Received: ' + eventMessage.data);
  var event = JSON.parse(eventMessage.data);
 
if (event.name === 'getEntityByIdResponse') {
     //JSON.parse(event.data.entity) is the entity by the id you asked, now use it to display the asked entity
  }
}


#### Exisiting Entities and Events ####

### Entities:


###Events You need to send:


###Events you need to listen/react to and cant never send:



Additional events you can refer to, you can both wait to receive them from the backend or send them yourself:

