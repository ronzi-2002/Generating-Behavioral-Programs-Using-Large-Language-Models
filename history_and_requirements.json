[{'role': 'user', 'content': 'There are 3 rooms in the house one of each type. One bathroom, one kitchen and a bedroom(the master bedroom).\n'}, {'role': 'assistant', 'content': "function room(id,subtype) {\n    return ctx.Entity(id, 'room', {subtype: subtype})\n}\nctx.populateContext([room('bathroom1','bathroom'),room('kitchen1','kitchen'),room('masterBedroom1','bedroom')]);\n\n"}, {'role': 'user', 'content': 'Needed queries:\n  1. room\n  2. kitchen\n  3. bathroom\n  4. room_with_tap - kitchen and bathroom \n'}]
{'Needed queries:\n  1. room\n  2. kitchen\n  3. bathroom\n  4. room_with_tap - kitchen and bathroom \n': "ctx.registerQuery('room', entity => entity.type == String('room'));\nctx.registerQuery('kitchen', entity => entity.type == String('room') && entity.subtype == String('kitchen'));\nctx.registerQuery('bathroom', entity => entity.type == String('room') && entity.subtype == String('bathroom'));\nctx.registerQuery('room_with_tap', entity => entity.type == String('room') && (entity.subtype == String('bathroom') || entity.subtype == String('kitchen')));\n", 'for each room with a tap, each time the button is pressed, pour hot water three times\n': '\nfunction buttonIsPressedEvent(roomId) {\n    return Event("buttonIsPressedEvent", roomId)\n}\nfunction addHotWaterEvent(roomId) {\n    return Event("addHotWaterEvent", roomId)\n}\n\nctx.bthread(\'for each room with a tap, each time the button is pressed, pour hot water three times\', \'room_with_tap\', function (room) {\n    while(true) {\n        sync({waitFor: [buttonIsPressedEvent(room.id)]});\n        sync({request: [addHotWaterEvent(room.id)]});\n        sync({request: [addHotWaterEvent(room.id)]});\n        sync({request: [addHotWaterEvent(room.id)]});\n    }\n})\n', 'for each room with a tap, after the first time the button is pressed, pour cold water three times\n': 'function addColdWaterEvent(roomId) {\n    return Event("addColdWaterEvent", roomId)\n}\nctx.bthread(\'for each room with a tap, after the first time the button is pressed, pour cold water three times\', \'room_with_tap\', function (room) {\n    sync({waitFor: [buttonIsPressedEvent(room.id)]});\n    sync({request: [addColdWaterEvent(room.id)]});\n    sync({request: [addColdWaterEvent(room.id)]});\n    sync({request: [addColdWaterEvent(room.id)]});\n})\n\n\n', 'For each kitchen — two pouring actions of the same type cannot be executed consecutively.starting with cold water\n': "ctx.bthread('For each kitchen — two pouring actions of the same type cannot be executed consecutively. starting with cold water', 'kitchen', function (kitchen) {\n    while(true){\n        sync({waitFor: [addColdWaterEvent(kitchen.id)], block: [addHotWaterEvent(kitchen.id)]});\n        sync({waitFor: [addHotWaterEvent(kitchen.id)], block: [addColdWaterEvent(kitchen.id)]});\n    }\n});\n\n", 'after a baby is put in the bathroom tub, cold/hot water cant be added\n': 'function babyIsInTubEvent(roomId) {\n    return Event("babyIsInTubEvent", roomId)\n}\nctx.bthread(\'after a baby is put in the bathroom tub, cold/hot water cant be added\', \'bathroom\', function (bathroom) {\n    sync({waitFor: [babyIsInTubEvent(bathroom.id)]});\n    sync({block: [addColdWaterEvent(bathroom.id), addHotWaterEvent(bathroom.id)]});\n});\n\n'}