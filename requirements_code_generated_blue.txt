Requirement:  For each water related enclosure, when the "clean" button is pressed, send a diver to clean the enclosure.

Code: function cleanButtonIsPressedEvent(animalEnclosureId) {
    return Event("cleanButtonIsPressedEvent", animalEnclosureId);
}
function sendDiverToCleanEvent(animalEnclosureId) {
    return Event("sendDiverToCleanEvent", animalEnclosureId);
}


ctx.bthread( "for each water related enclosure, when the 'clean' button is pressed, send a diver to clean the enclosure", "water_related_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonIsPressedEvent(animalEnclosure.id)] });
        sync({ request: [sendDiverToCleanEvent(animalEnclosure.id)] });
    }
});


Generated Code: function cleanButtonPressedEvent(enclosureId) {
    return Event("cleanButtonPressedEvent", {enclosureId: enclosureId});
}

function sendDiverEvent(enclosureId) {
    return Event("sendDiverEvent", {enclosureId: enclosureId});
}

ctx.bthread('Send diver to clean water related enclosures when clean button is pressed', 'water_related_enclosure', function (enclosure) {
    while(true){
        sync({waitFor: [cleanButtonPressedEvent(enclosure.id)]});
        sync({request: [sendDiverEvent(enclosure.id)]});
    }
});
Blue Score: {'codebleu': 0.7106938917190052, 'ngram_match_score': 0.04024376211125181, 'weighted_ngram_match_score': 0.04447293285657772, 'syntax_match_score': 0.7555555555555555, 'dataflow_match_score': 1.0}

Requirement:  For each non-water related enclosure, when the "clean" button is pressed, send a janitor to clean the enclosure.

Code: function sendJanitorToCleanEvent(animalEnclosureId) {
    return Event("sendJanitorToCleanEvent", animalEnclosureId);
}


ctx.bthread( "for each non-water related enclosure, when the 'clean' button is pressed, send a janitor to clean the enclosure", "non_water_related_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [cleanButtonIsPressedEvent(animalEnclosure.id)] });
        sync({ request: [sendJanitorToCleanEvent(animalEnclosure.id)] });
    }
});


Generated Code: function cleanButtonPressedEvent(enclosureId) {
    return Event("cleanButtonPressedEvent", {enclosureId: enclosureId});
}

function sendJanitorEvent(enclosureId) {
    return Event("sendJanitorEvent", {enclosureId: enclosureId});
}

ctx.bthread('Send janitor to clean non-water related enclosures when clean button is pressed', 'non_water_related_enclosure', function (enclosure) {
    while(true){
        sync({waitFor: [cleanButtonPressedEvent(enclosure.id)]});
        sync({request: [sendJanitorEvent(enclosure.id)]});
    }
});
Blue Score: {'codebleu': 0.6656939249512304, 'ngram_match_score': 0.043029758834780454, 'weighted_ngram_match_score': 0.045488438045944185, 'syntax_match_score': 0.8421052631578947, 'dataflow_match_score': 0.8}

Requirement:  For each lion enclosure, when the "feed" button is pressed, send a zookeeper to feed the lions.

Code: function feedButtonIsPressedEvent(animalEnclosureId) {
    return Event("feedButtonIsPressedEvent", animalEnclosureId);
}
function sendZookeeperToFeedEvent(animalEnclosureId) {
    return Event("sendZookeeperToFeedEvent", animalEnclosureId);
}


ctx.bthread( "for each lion enclosure, when the 'feed' button is pressed, send a zookeeper to feed the lions", "lion_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [feedButtonIsPressedEvent(animalEnclosure.id)] });
        sync({ request: [sendZookeeperToFeedEvent(animalEnclosure.id)] });
    }
});



Generated Code: function feedButtonPressedEvent(enclosureId) {
    return Event("feedButtonPressedEvent", {enclosureId: enclosureId});
}

function sendZookeeperEvent(enclosureId) {
    return Event("sendZookeeperEvent", {enclosureId: enclosureId});
}

ctx.bthread('Send zookeeper to feed lions when feed button is pressed', 'lion_enclosure', function (enclosure) {
    while(true){
        sync({waitFor: [feedButtonPressedEvent(enclosure.id)]});
        sync({request: [sendZookeeperEvent(enclosure.id)]});
    }
});
Blue Score: {'codebleu': 0.7103900853559463, 'ngram_match_score': 0.038390836520802156, 'weighted_ngram_match_score': 0.043287794816437984, 'syntax_match_score': 0.7555555555555555, 'dataflow_match_score': 1.0}

Requirement:  After lions are fed, they cannot be fed again until they roar.

Code: function lionRoarEvent(animalEnclosureId) {
    return Event("lionRoarEvent", animalEnclosureId);
}

ctx.bthread( "after lions are fed, they cannot be fed again until they roar", "lion_enclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [sendZookeeperToFeedEvent(animalEnclosure.id)] });
        sync({ waitFor: [lionRoarEvent(animalEnclosure.id)], block: [sendZookeeperToFeedEvent(animalEnclosure.id)] });
    }
});


Generated Code: function lionsFedEvent(enclosureId) {
    return Event("lionsFedEvent", {enclosureId: enclosureId});
}

function lionsRoarEvent(enclosureId) {
    return Event("lionsRoarEvent", {enclosureId: enclosureId});
}

ctx.bthread('Lions cannot be fed again until they roar', 'lion_enclosure', function (enclosure) {
    while(true){
        sync({waitFor: [lionsFedEvent(enclosure.id)]});
        sync({waitFor: [lionsRoarEvent(enclosure.id)]});
    }
});
Blue Score: {'codebleu': 0.5746279730247026, 'ngram_match_score': 0.1587289931003447, 'weighted_ngram_match_score': 0.16894608598388994, 'syntax_match_score': 0.6046511627906976, 'dataflow_match_score': 0.75}

Requirement:  After The zoo is closed, lights in all animal enclosures are turned off

Code: function zooClosedEvent() {
    return Event("zooClosedEvent");
}
function turnOffLightsEvent(animalEnclosureId) {
    return Event("turnOffLightsEvent", animalEnclosureId);
}

ctx.bthread( "after The zoo is closed, lights in all animal enclosures are turned off", "animalEnclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [zooClosedEvent()] });
        sync({ request: [turnOffLightsEvent(animalEnclosure.id)] });
    }
});



Generated Code: function zooClosedEvent() {
    return Event("zooClosedEvent");
}

function turnOffLightsEvent(enclosureId) {
    return Event("turnOffLightsEvent", {enclosureId: enclosureId});
}

ctx.bthread('Turn off lights in all animal enclosures after the zoo is closed', 'animalEnclosure', function (enclosure) {
    sync({waitFor: [zooClosedEvent()]});
    sync({request: [turnOffLightsEvent(enclosure.id)]});
});
Blue Score: {'codebleu': 0.7016778852034702, 'ngram_match_score': 0.2544841028214093, 'weighted_ngram_match_score': 0.27744626436480685, 'syntax_match_score': 0.7045454545454546, 'dataflow_match_score': 0.9166666666666666}

Requirement:   Animal enclosures lights turn on right after sunset starts

Code: function turnOnLightsEvent(animalEnclosureId) {
    return Event("turnOnLightsEvent", animalEnclosureId);
}
function sunsetStartEvent() {
    return Event("sunsetStartEvent");
}

ctx.bthread( "Zoo lights turn on right after sunset starts", "animalEnclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [sunsetStartEvent()] });
        sync({ request: [turnOnLightsEvent(animalEnclosure.id)] });
    }
});


Generated Code: function sunsetStartsEvent() {
    return Event("sunsetStartsEvent");
}

function turnOnLightsEvent(enclosureId) {
    return Event("turnOnLightsEvent", {enclosureId: enclosureId});
}

ctx.bthread('Turn on lights in all animal enclosures right after sunset starts', 'animalEnclosure', function (enclosure) {
    while(true){
        sync({waitFor: [sunsetStartsEvent()]});
        sync({request: [turnOnLightsEvent(enclosure.id)]});
    }
});
Blue Score: {'codebleu': 0.7578237423353547, 'ngram_match_score': 0.059781674814878165, 'weighted_ngram_match_score': 0.06391029399321314, 'syntax_match_score': 0.8636363636363636, 'dataflow_match_score': 1.0}

Requirement:  Animal enclosures lights cant be turned off until they were turned on and vice versa. All zoo lights are off at first(default)

Code: ctx.bthread( "Animal enclosures lights cant be turned off until they were turned on and vice versa. All zoo lights are off at first(default)", "animalEnclosure", function (animalEnclosure) {
    while (true) {
        sync({ waitFor: [turnOnLightsEvent(animalEnclosure.id)], block: [turnOffLightsEvent(animalEnclosure.id)] });
        sync({ waitFor: [turnOffLightsEvent(animalEnclosure.id)], block: [turnOnLightsEvent(animalEnclosure.id)] });
    }
});
Generated Code: function turnOffLightsEvent(enclosureId) {
    return Event("turnOffLightsEvent", {enclosureId: enclosureId});
}

function turnOnLightsEvent(enclosureId) {
    return Event("turnOnLightsEvent", {enclosureId: enclosureId});
}

ctx.bthread('Animal enclosures lights cannot be turned off until they were turned on and vice versa, starting with lights off', 'animalEnclosure', function (enclosure) {
    while(true){
        sync({waitFor: [turnOnLightsEvent(enclosure.id)], block: [turnOffLightsEvent(enclosure.id)]});
        sync({waitFor: [turnOffLightsEvent(enclosure.id)], block: [turnOnLightsEvent(enclosure.id)]});
    }
});
Blue Score: {'codebleu': 0.727774010508925, 'ngram_match_score': 0.2172833167707285, 'weighted_ngram_match_score': 0.24892685483736787, 'syntax_match_score': 0.975609756097561, 'dataflow_match_score': 0.7272727272727273}

