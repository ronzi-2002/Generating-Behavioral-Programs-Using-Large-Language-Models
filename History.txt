{'role': 'user', 'content': 'There is a smart light bulb(which can be on and off)\n'}
{'role': 'assistant', 'content': "function smartLightBulb(id, on) {\n    return ctx.Entity(id, 'smartLightBulb', {on: on})\n}\n\nctx.populateContext([smartLightBulb('smartLightBulb1', false)])\n"}
{'role': 'user', 'content': 'Needed queries:\n 1. light\n 2. light On\n'}
{'role': 'assistant', 'content': "ctx.registerQuery('light', entity => entity.type == 'smartLightBulb');\n\nctx.registerQuery('lightOn', entity => entity.type == 'smartLightBulb' && entity.on == true);\n"}
{'role': 'user', 'content': 'When motion is detected, the light bulb turns on\n'}
{'role': 'assistant', 'content': 'function motionDetectedEvent() {\n    return Event("motionDetectedEvent");\n}\n\nfunction turnOnLightEvent(lightId) {\n    return Event("turnOnLightEvent", {lightId: lightId});\n}\n\nctx.registerEffect(\'turnOnLightEvent\', function (data) {\n    let light = ctx.getEntityById(data.lightId);\n    light.on = true;\n});\n\nctx.bthread(\'When motion is detected, the light bulb turns on\', \'light\', function (light) {\n    while(true){\n        sync({waitFor: [motionDetectedEvent()]});\n        sync({request: [turnOnLightEvent(light.id)]});\n    }\n});\n'}
{'role': 'user', 'content': 'While the light bulbÂ\xa0is on, the house cant be exited\n'}
{'role': 'assistant', 'content': 'function exitHouseEvent() {\n    return Event("exitHouseEvent");\n}\n\nctx.bthread(\'While the light bulb is on, the house can\\\'t be exited\', \'lightOn\', function (light) {\n    while(true){\n        sync({block: [exitHouseEvent()]});\n    }\n});\n'}
{'role': 'user', 'content': 'Light bulb turns off after 5 minutes\n'}
{'role': 'assistant', 'content': 'function turnOffLightEvent(lightId) {\n    return Event("turnOffLightEvent", {lightId: lightId});\n}\n\nctx.registerEffect(\'turnOffLightEvent\', function (data) {\n    let light = ctx.getEntityById(data.lightId);\n    light.on = false;\n});\n\nctx.bthread(\'Light bulb turns off after 5 minutes\', \'lightOn\', function (light) {\n    while(true){\n        let waitTill = new Date().getTime() + 300000; // 5 minutes\n        sync({waitFor: [TimeToBe(new Date(waitTill).getHours(), new Date(waitTill).getMinutes())]});\n        sync({request: [turnOffLightEvent(light.id)]});\n    }\n});\n'}
{'role': 'user', 'content': 'When the house is entered, The light bulb turns on and the user is notified\n'}
{'role': 'assistant', 'content': 'function houseEnteredEvent() {\n    return Event("houseEnteredEvent");\n}\n\nfunction notifyUserEvent() {\n    return Event("notifyUserEvent");\n}\n\nctx.bthread(\'When the house is entered, the light bulb turns on and the user is notified\', \'light\', function (light) {\n    while(true){\n        sync({waitFor: [houseEnteredEvent()]});\n        RequestAllEvents([turnOnLightEvent(light.id), notifyUserEvent()]);\n    }\n});\n'}
